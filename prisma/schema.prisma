// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}
enum Role {
  USER
  ADMIN
  SELLER
}
enum RoleStatus  {
  APPROVED
  REJECTED
  INPROGRESS
}



model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  role          Role       @default(USER)
  roleStatus    RoleStatus @default(APPROVED)
  emailVerified DateTime?
  image         String?
  Order         Order[]
  Cart          Cart[]
  Product       Product[]
  AdminMessage  AdminMessage?
}

model Order {
  id            String          @id @default(cuid())
  number        Int             @unique @default(autoincrement())
  price         Float
  notes         String?
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  OrderProducts OrderProducts[]
  Product       Product[]

  @@index([id])
}

model Product {
  id            String          @id @default(cuid())
  title         String          @unique
  description   String?
  photo         String?
  price         Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Order         Order?          @relation(fields: [orderId], references: [id])
  orderId       String?
  Cart          Cart[]
  OrderProducts OrderProducts[]
  userId        String?
  user          User?            @relation(fields: [userId], references: [id])


  @@index([title])
}

model Cart {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  count     Int
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model OrderProducts {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  count     Int
}


model AdminMessage {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  message   String
}